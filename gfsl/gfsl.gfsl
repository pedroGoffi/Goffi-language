// NOTE: include path are relative to the root dir
#include "./std/std.gfsl"
#include "./gfsl/Token.gfsl"


proc usage int -> void do
  local stream sizeof(u64) end
  stream swap 64<-
  "Usage: %s [OPTIONS] input-file-path\n"	stream 64-> fputs
  "OPTIONS:\n"					stream 64-> fputs
  "    -h          print this help in stdout\n" stream 64-> fputs
  "    -o  <path>  provide output path\n"	stream 64-> fputs
  "    sim <file>  simulate the program\n"	stream 64-> fputs
  "    com <file>  compile the program\n"	stream 64-> fputs
end

proc ptr_w_str_streq  ptr int ptr -> bool
do
  // ptr int ptr
  local tmp sizeof(str) end
  tmp str.data  swap ptr<-
  tmp str.count swap ptr<-
  
  tmp
  streq
end
// LEXER \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\



proc push_to_token_list ptr -> void do
  local _ptr sizeof(Token) end
  64-> _ptr swap ptr<-

end
// BUGS: this will crash the program if the file is empty
proc lex_file ptr -> void do 
  local fc sizeof(str) end
  
  dup str.count 64-> fc str.count swap ptr<-
      str.data  64-> fc str.data  swap ptr<-
  while fc str.count 64-> 0 > do
     local f_line sizeof(str) end     
     fc
     chop_line
     trim_left     
     dup str.count 64-> f_line str.count swap ptr<-
         str.data  64-> f_line str.data  swap ptr<-
	 
     while f_line str.count 64-> 0 > do
          f_line
          chop_word

 	  local word sizeof(str)    end
	  local token sizeof(Token) end
	  dup str.data 64->  word str.data swap ptr<-	  
	      str.count 64-> word str.count swap ptr<-


	  token
	  word
	  save_token_from_word
	  push_to_token_list
	  

     end
     "------------------\n"	puts
   end


end

proc main do
   if argc 1 < do
      stderr usage
     "ERROR: Not enough arguments\n" eputs
     1 exit
   end
   // NOTE: file_path will be ALWAYS the 2nd arg for now
   // TODO: parse CMD arguments for better experience
   local a sizeof(str) end
   local b sizeof(str) end
   
   2 nth_argv open_file 64->  
   local file_content sizeof(str) end
   file_content str.data  swap ptr<-
   file_content str.count swap ptr<-   
   file_content lex_file


   
end

